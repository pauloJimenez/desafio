{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","rows","url","Math","floor","random","xhttp","XMLHttpRequest","open","onreadystatechange","readyState","status","push","responseText","substring","indexOf","send","this","setState","className","align","border","map","renderRow","onClick","next","bind","row","substr","length","split","executa","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eae6fdaf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {   \t\t    \n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t//this.executa = this.executa.bind(this);\n        this.state = {rows: []};\n    }\n\n\tnext(){\n\n\t\tlet rows = []\n\t  \n\t\tlet numRand = Math.floor(Math.random() * 61 + 1);\n\t\t\n\t\tvar url = \"https://swapi.co/api/planets/\"+numRand;\n\t   \n\t\tvar xhttp = new XMLHttpRequest();\n\t\t\t  xhttp.open(\"GET\", url, false);\n\t\t\txhttp.onreadystatechange = function(){//Função a ser chamada quando a requisição retornar do servidor\n\t\t\t  if (xhttp.readyState === 4 && xhttp.status === 200 ) {//Verifica se o retorno do servidor deu certo\n\t\t\t\t  \n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"name\"),xhttp.responseText.indexOf(\"rotation\")-3))\t\t\t\t\t  \n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"population\"),xhttp.responseText.indexOf(\"residents\")-3))\n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"climate\"),xhttp.responseText.indexOf(\"gravity\")-3))\n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"terrain\"),xhttp.responseText.indexOf(\"surface_water\")-3))\n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"films\"),xhttp.responseText.indexOf(\"created\")-3))\n\t\t\t  }\n\t\t\t}\n\t\t\t xhttp.send(); \t\t             \n\n\t\t\t this.setState({rows: rows});\n\n\t\treturn(\n\t\t  <div className=\"App\">\t\t  \n\t\t\t<table align=\"center\" border=\"1\">{rows.map(this.renderRow)}</table>\n\t\t\t\n\t\t   </div>\t\t \n\t\t  \n\t\t  );\n\t\n\n\t}\n\n\texecuta(){\n\t\t\n\t\tlet rows = []\n\t  \n\t\tlet numRand = Math.floor(Math.random() * 61 + 1);\n\t\t\n\t\tvar url = \"https://swapi.co/api/planets/\"+numRand;\n\t   \n\t\tvar xhttp = new XMLHttpRequest();\n\t\t\t  xhttp.open(\"GET\", url, false);\n\t\t\txhttp.onreadystatechange = function(){//Função a ser chamada quando a requisição retornar do servidor\n\t\t\t  if (xhttp.readyState === 4 && xhttp.status === 200 ) {//Verifica se o retorno do servidor deu certo\n\t\t\t\t  \n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"name\"),xhttp.responseText.indexOf(\"rotation\")-3))\t\t\t\t\t  \n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"population\"),xhttp.responseText.indexOf(\"residents\")-3))\n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"climate\"),xhttp.responseText.indexOf(\"gravity\")-3))\n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"terrain\"),xhttp.responseText.indexOf(\"surface_water\")-3))\n\t\t\t\t  rows.push(xhttp.responseText.substring(xhttp.responseText.indexOf(\"films\"),xhttp.responseText.indexOf(\"created\")-3))\n\t\t\t  }\n\t\t\t}\n\t\t\t xhttp.send(); \t\t             \n\n\t\treturn(\n\t\t  <div className=\"App\">\t\t  \n\t\t\t<table align=\"center\" border=\"1\">{rows.map(this.renderRow)}</table>\n\t\t\t<button onClick={this.next.bind(this)}>Next</button>\n\t\t   </div>\t\t \n\t\t  \n\t\t  );\n\t\t   \n\t} \n\n\trenderRow(row){\n\t\t\n\t\tif(row.substr(0,row.indexOf('\":\"'))===\"name\") return <tr><td>Planeta: {row.substr(row.indexOf(\"name\")+7,row.length)}</td></tr>\n\t\telse if (row.substr(0,row.indexOf('\":\"')) ===\"population\") return <tr><td>Population: {row.substr(row.indexOf(\"population\")+13,row.length)}</td></tr>\n\t\telse if (row.substr(0,row.indexOf('\":\"')) ===\"climate\") return <tr><td>Climate: {row.substr(row.indexOf(\"climate\")+10,row.length)}</td></tr>\n\t\telse if (row.substr(0,row.indexOf('\":\"')) ===\"terrain\") return <tr><td>Terrain: {row.substr(row.indexOf(\"terrain\")+10,row.length)}</td></tr>\n\t\telse if (row.substr(0,row.indexOf('\":[\"')) ===\"films\") return <tr><td>Featured in : {row.split(\",\").length}</td></tr>\n\t}\n  \n  render() {\n\t  \n\t return this.executa();\n\t\t\n    }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}